package jp.rte.core.controller;

import java.io.IOException;
import java.net.URLEncoder;
import java.security.NoSuchAlgorithmException;
import java.util.UUID;

import org.scribe.builder.ServiceBuilder;
import org.scribe.builder.api.FacebookApi;
import org.scribe.model.Token;
import org.scribe.model.Verifier;
import org.scribe.oauth.OAuthService;
import org.slim3.controller.Controller;

import jp.rte.core.utils.init.ApplicationSettings;
import jp.rte.core.utils.string.TextUtils;

import com.restfb.DefaultFacebookClient;
import com.restfb.types.User;

public abstract class FacebookController extends Controller {

    private static final Token EMPTY_TOKEN = null;

    protected static final String scope = "manage_pages,publish_stream";

    protected static final String FACEBOOK_URL =
        "https://www.facebook.com/dialog/oauth?client_id=";

    protected static final String CONSUMER_KEY = ApplicationSettings
        .getString("consumer.key");

    protected static final String REDIRECT_URI = ApplicationSettings
        .getString("callback.url");

    protected static final String CONSUMER_SECRET = ApplicationSettings
        .getString("consumer.secret");

    private static String access_token = null;

    protected void clearSession() {
    //session情報の削除
        removeSessionScope("user_id");
        removeSessionScope("user_name");
        removeSessionScope("access_token");
    }

    protected String facebookAuth() {

        String code = asString("code");
        String state = asString("state");

        if (code == null) {
            clearSession();
            return facebookAuthRequest();
        }

        if (state.equals(sessionScope("state").toString())) {
            User user = facebookgetUserRequest();

            if (user != null) {
                sessionScope("user_id", user.getId());
                sessionScope("user_name", user.getName());
                sessionScope("access_token", access_token);
                requestScope("response", user);
                Object url = sessionScope("callback_redirect_url");
                if (url != null) {
                    removeSessionScope("callback_redirect_url");
                    return url.toString();
                }
            }
        }
        return null;

    }

    protected User facebookgetUserRequest() {
        OAuthService service =
            new ServiceBuilder()
                .provider(FacebookApi.class)
                .apiKey(CONSUMER_KEY)
                .apiSecret(CONSUMER_SECRET)
                .callback(REDIRECT_URI)
                .build();

        Verifier verifier = new Verifier(asString("code"));
        Token accessToken = service.getAccessToken(EMPTY_TOKEN, verifier);

        access_token = accessToken.getToken();

        DefaultFacebookClient client = new DefaultFacebookClient(access_token);
        User user = client.fetchObject("me", User.class);
        return user;
    }

    protected String facebookAuthRequest() {
        try {
            String uuid = UUID.randomUUID().toString();
            String hash = TextUtils.createDigest(uuid);
            sessionScope("state", hash);
            String path =
                FACEBOOK_URL
                    + CONSUMER_KEY
                    + "&redirect_uri="
                    + URLEncoder.encode(REDIRECT_URI, "utf-8")
                    + "&scope="
                    + scope
                    + "&state="
                    + hash;
            return path;
        } catch (IOException e) {
            return null;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
}
