package jp.rte.core.utils.string;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TextUtils {
    static Pattern DOMAIN = Pattern
        .compile("https?:\\/\\/[-_.!~*'()a-zA-Z0-9;?:\\@&=+\\$,%#]+\\/");

    public static String createDigest(String source)
            throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");

        byte[] data = source.getBytes();
        md.update(data);

        byte[] digest = md.digest();

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < digest.length; i++) {
            int b = (0xFF & digest[i]);
            if (b < 16)
                sb.append("0");
            sb.append(Integer.toHexString(b));
        }
        return sb.toString();
    }

    /**
     * URLからドメインだけを抽出
     *
     * @param url
     * @return
     */
    public static String getDomain(String url) {
        String domain = null;
        Matcher m = DOMAIN.matcher(url);
        if (m.find()) {
            domain = m.group(0);
        }
        return domain;
    }

    public static Integer[] toIntegerArray(String[] strings) {
        List<String> list = Arrays.asList(strings);
        List<Integer> list2 = new ArrayList<Integer>();
        for (String string : list) {
            list2.add(Integer.parseInt(string));
        }
        return (Integer[]) list2.toArray(new Integer[0]);
    }

    public static String trimString(String str, Integer len, String charset) {
        StringBuffer sb = new StringBuffer();
        int cnt = 0;

        try {
            for (int i = 0; i < str.length(); i++) {
                String tmpStr = str.substring(i, i + 1);
                byte[] b = tmpStr.getBytes(charset);
                if (cnt + b.length > len) {
                    return sb.toString();
                } else {
                    sb.append(tmpStr);
                    cnt += b.length;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return sb.toString();
    }

}
