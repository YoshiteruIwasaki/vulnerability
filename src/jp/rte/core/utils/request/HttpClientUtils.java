package jp.rte.core.utils.request;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class HttpClientUtils {

    private static String createGetUrl(String url,
            Map<String, String> requestParams) {
        // リクエストパラメータの設定
        StringBuilder builder = new StringBuilder(url);
        builder.append("?");
        for (Map.Entry<String, String> entry : requestParams.entrySet()) {
            builder.append((String) entry.getKey());
            builder.append("=");
            try {
                builder.append(URLEncoder.encode((String) entry.getValue(), "utf-8"));
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            builder.append("&");
        }

        String tmpUrl = builder.toString();
        return tmpUrl.substring(0, tmpUrl.length() - 1);

    }

    public static HttpEntity httpGet(String url,
            Map<String, String> requestParams) {
        HttpEntity entity = null;
        DefaultHttpClient httpClient = new DefaultHttpClient();
        HttpParams params = httpClient.getParams();
        HttpConnectionParams.setConnectionTimeout(params, 1000);
        HttpConnectionParams.setSoTimeout(params, 1000);
        String strUri = createGetUrl(url, requestParams);
        HttpGet httpRequest = new HttpGet(strUri);
        try {
            HttpResponse response = httpClient.execute(httpRequest);
            if (response != null
                && response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                entity = response.getEntity();
            }
        } catch (ClientProtocolException e) {
            // TODO 自動生成された catch ブロック
            e.printStackTrace();
        } catch (IOException e) {
            // TODO 自動生成された catch ブロック
            e.printStackTrace();
        }
        httpClient.getConnectionManager().shutdown();
        return entity;
    }

}
